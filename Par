using System;
using System.Collections.Generic;
using System.Text;
using NUnit.Framework;

namespace TableParser
{
    [TestFixture]
    public class FieldParserTaskTests
    {
        public static void Test(string input, string[] expectedResult)
        {
            var actualResult = FieldsParserTask.ParseLine(input);
            Assert.AreEqual(expectedResult.Length, actualResult.Count);
            for (int i = 0; i < expectedResult.Length; ++i)
            {
                Assert.AreEqual(expectedResult[i], actualResult[i].Value);
            }
        }

        // Скопируйте сюда метод с тестами из предыдущей задачи.
    }

    public class FieldsParserTask
    {
        // При решении этой задаче постарайтесь избежать создания методов, длиннее 10 строк.
        // Подумайте как можно использовать ReadQuotedField и Token в этой задаче.
        public static List<Token> ParseLine(string line)
        {
            var tokenList = new List<Token>();
            for (int i = 0; i < line.Length; i++)
            {
                if (line[i] == ' ') continue;
                Token token;
                // сложное поле
                if ((line[i] == '\"') || (line[i] == '\''))
                {
                    token = ReadQuotedField(line, i);
                }
                // простое поле
                else
                {
                    token = ReadField(line, i);
                    i = token.GetIndexNextToToken() - 1;
                }
                tokenList.Add(token);

            }

            return new List<Token> { ReadQuotedField(line, 0) }; // сокращенный синтаксис для инициализации коллекции.
        }

        private static Token ReadQuotedField(string line, int i)
        {
            throw new NotImplementedException();
        }

        private static Token ReadField(string line, int startIndex)
        {
            
            var builder = new StringBuilder();
            List<char> symbols = new List<char>() {' ', '\'', '\"'};
            for (int i = startIndex; i < line.Length; i++)
            {
                
                if (symbols.Contains(line[i]))
                {
                    break;
                }
                else
                {
                    builder.Append(line[i]);
                }
            }
            return new Token(builder.ToString(), builder.Length, startIndex);
        }

    }
}
